import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import axios from 'axios';
import { RootState,} from '../app/store';
import { Profile, Name, Auth } from '../types/user'

const apiUrl = process.env.REACT_APP_DEV_API_URL


const initialState = {
    modalOpen: false,
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const componentSlice = createSlice({
  name: 'component',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
      handleModalOpen(state) {
          state.modalOpen = true
      },
      handleModalClose(state) {
          state.modalOpen = false
      },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
//   extraReducers: (builder) => {
//     builder
//         .addCase(fetchAsyncLogin.fulfilled, (state, action) => {
//             localStorage.setItem('localJWT', action.payload.access)
//         })
//         .addCase(fetchAsyncCreateProf.fulfilled, (state, action) => {
//             state.myprofile = action.payload
//         })
//         .addCase(fetchAsyncGetUsers.fulfilled, (state, action) => {
//             state.users = action.payload
//         })
//         .addCase(fetchAsyncGetMyProf.fulfilled, (state, action) => {
//             state.myprofile = action.payload
//         })
//         .addCase(fetchAsyncGetProfs.fulfilled, (state, action) => {
//             state.profiles = action.payload
//         })
//         .addCase(fetchAsyncUpdateProf.fulfilled, (state, action) => {
//             state.myprofile = action.payload
//             state.profiles = state.profiles.map((prof) => 
//                 prof.id === action.payload.id ? action.payload : prof
//             )
//         })
//   },
});

export const { 
    handleModalOpen,
    handleModalClose,
} = componentSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
export default componentSlice.reducer;
