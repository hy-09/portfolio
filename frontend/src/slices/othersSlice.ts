import { createSlice } from '@reduxjs/toolkit';
import { Modal, Notify } from '../types/others';

type InitialState = {
    isLoading: boolean;
    modal: Modal;
    notify: Notify;
}

const initialState: InitialState = {
    isLoading: false,
    modal: {
        open: false,
        title: '',
        content: ''
    },
    notify: {
        open: false,
        message: '',
        type: undefined,
    },
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const othersSlice = createSlice({
    name: 'others',
    initialState,
  // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        startLoading(state) {
            state.isLoading = true
        },
        endLoading(state) {
            state.isLoading = false
        },
        handleModalOpen(state, action) {
            state.modal = {
                open: true,
                title: action.payload.title ? action.payload.title : '',
                content: action.payload.content
            }
        },
        handleModalClose(state) {
            state.modal = {
                open: false,
                title: '',
                content: ''
            }
        },
        handleNotifyOpen(state, action) {
            state.notify = {
                open: true,
                message: action.payload.message,
                type: action.payload.type,
            }
        },
        handleNotifyClose(state) {
            state.notify = {
                open: false,
                message: '',
                type: undefined,
            }
        },
        resetOthersState(state) {
            state.modal = initialState.modal
            state.notify = initialState.notify
        }
    },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
//   extraReducers: (builder) => {
//     builder
//         .addCase(fetchAsyncLogin.fulfilled, (state, action) => {
//             localStorage.setItem('localJWT', action.payload.access)
//         })
//         .addCase(fetchAsyncCreateProf.fulfilled, (state, action) => {
//             state.myprofile = action.payload
//         })
//         .addCase(fetchAsyncGetUsers.fulfilled, (state, action) => {
//             state.users = action.payload
//         })
//         .addCase(fetchAsyncGetMyProf.fulfilled, (state, action) => {
//             state.myprofile = action.payload
//         })
//         .addCase(fetchAsyncGetProfs.fulfilled, (state, action) => {
//             state.profiles = action.payload
//         })
//         .addCase(fetchAsyncUpdateProf.fulfilled, (state, action) => {
//             state.myprofile = action.payload
//             state.profiles = state.profiles.map((prof) => 
//                 prof.id === action.payload.id ? action.payload : prof
//             )
//         })
//   },
});

export const { 
    startLoading, 
    endLoading,  
    handleModalOpen,
    handleModalClose,
    handleNotifyOpen,
    handleNotifyClose,
    resetOthersState,
} = othersSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
export default othersSlice.reducer;
